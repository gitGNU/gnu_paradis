In order to the program easy to port and make sure serialisation
protocol change does not break version compatbility we use our
own protocol for converting data to octet streams.


Primitive types:

    boolean  One bit data
    byte     One byte data
    short    Two byte data
    char     Character up to 16-bit
    wchar    Character up to 31-bit
    int      Four byte data
    long     Eight byte data
    
    
    A boolean is transfered in one byte, either of value 1 or 0.
    1 is for true, and 0 is for false. You should exception
    non-zero for true.
    
    A byte consists of 8 bits (one byte), and is encoding normally.
    
    A short consists of two bytes, the first is the most significant.
    
    An int consists of four bytes, the first is the most significant, the later the less significant.
    
    An long consists of four bytes, the first is the most significant, the later the less significant.
    
    The most significant bit determines sign, turned on for negative, and turned off for non-negative
    (positive or zero).  ~x = -x - 1
    
    char and wchar is encoding in UTF-8.


Primitive type arrays:

    First the length of the array is transfered in 4 bytes as a bitwise inverted int,
    but if the integer is less 2¹⁵ it is transfered regularly as a 2 byte short.
    
    For byte[], short[], int[] and long[] each element is transfered in order
    with the same protocol as the elements have if they were not in an arrays.
    char[] is transfered as short[].
    boolean[] is compressed into bytes (|bytes| = ⌈|booleans| / 8⌉) with false
    dummy boolean where. The booleans are transfered in ordered, where
    false is represented by a 0 bit, and true is represented by a 1 bit;
    in a group of 8, the first boolean occupies the most signiciant bit.


String:

    A string is transfered in UTF-8 (not UTF-16 or modified UTF-8)
    with a prepending length of the number of bytes in the UTF-8 encoding.
    The lengtyh is transfered as in arrays.


Object arrays:
    
    Transfered just like primitive arrays.



Message in packets have their size written in the beginning of marshalling using
the method TransferOutputStream#writeLenOf(Object) iff the object is not an array.
This is important that relay clients that does have the unmarshalling mechanism
can unmarshall it to a byte array instread (skipping unmarshalling).

